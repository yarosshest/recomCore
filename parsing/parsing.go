package recomCore

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	db "recomCore/bdHandler"
	"recomCore/ent"
)

type AutoGenerated struct {
	PosterURL              string  `json:"poster_url"`
	WebURL                 string  `json:"web_url"`
	NameOriginal           string  `json:"name_original"`
	RatingImdb             any     `json:"rating_imdb"`
	Slogan                 string  `json:"slogan"`
	RatingImdbVoteCount    int     `json:"rating_imdb_vote_count"`
	Description            string  `json:"description"`
	ID                     int     `json:"id"`
	RatingFilmCritics      any     `json:"rating_film_critics"`
	RatingKinopoisk        float64 `json:"rating_kinopoisk"`
	KinopoiskID            int     `json:"kinopoisk_id"`
	RatingCriticsVoteCount int     `json:"rating_critics_vote_count"`
	ShortDesription        string  `json:"short_desription"`
	ImdbID                 any     `json:"imdb_id"`
	Year                   int     `json:"year"`
	RatingAgeLimits        string  `json:"rating_age_limits"`
	NameRu                 string  `json:"name_ru"`
	FilmLength             any     `json:"film_length"`
	Genres                 string  `json:"genres"`
}

func openJson(name string) *os.File {
	// Open our jsonFile
	jsonFile, err := os.Open(name)
	// if we os.Open returns an error then handle it
	if err != nil {
		fmt.Println(err)
	}
	return jsonFile
}

func closeJson(jsonFile *os.File) {
	err := jsonFile.Close()
	if err != nil {
		fmt.Println(err)
	}
}

func readFilm(ctx context.Context, client *ent.Client, film AutoGenerated) {

	prod, err := client.Product.Create().
		SetName(film.NameRu).
		SetDescription(film.Description).
		SetPhoto(film.PosterURL).
		Save(ctx)

	if err != nil {
		fmt.Println(err)
		return
	}

	atributes := make(map[string]string)
	atributes["web_url"] = film.WebURL
	atributes["name_original"] = film.NameOriginal
	atributes["rating_imdb"] = fmt.Sprintf("%f", film.RatingImdb)
	atributes["slogan"] = film.Slogan
	atributes["rating_imdb_vote_count"] = fmt.Sprintf("%d", film.RatingImdbVoteCount)
	atributes["rating_film_critics"] = fmt.Sprintf("%f", film.RatingFilmCritics)
	atributes["rating_kinopoisk"] = fmt.Sprintf("%f", film.RatingKinopoisk)
	atributes["kinopoisk_id"] = fmt.Sprintf("%d", film.KinopoiskID)
	atributes["rating_critics_vote_count"] = fmt.Sprintf("%d", film.RatingCriticsVoteCount)
	atributes["short_desription"] = film.ShortDesription
	atributes["imdb_id"] = fmt.Sprintf("%d", film.ImdbID)
	atributes["year"] = fmt.Sprintf("%d", film.Year)
	atributes["rating_age_limits"] = film.RatingAgeLimits
	atributes["film_length"] = fmt.Sprintf("%f", film.FilmLength)
	atributes["genres"] = film.Genres

	for key, value := range atributes {
		_, err := client.Attribute.Create().
			SetName(key).
			SetValue(value).
			SetOwner(prod).
			Save(ctx)

		if err != nil {
			fmt.Println(err)
			return
		}
	}
}

func readJson(jsonFile *os.File) {
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var data []AutoGenerated
	var err = json.Unmarshal(byteValue, &data)

	if err != nil {
		fmt.Println(err)
		return
	}

	client := db.Open("postgresql://postgres:postgres@localhost/recomCore")
	defer db.Close(client)

	for _, film := range data {
		readFilm(context.Background(), client, film)
	}

}

func JsonParsing() {
	var jsonFile = openJson("parsing/Kinopoisk.json")
	defer closeJson(jsonFile)
	readJson(jsonFile)
}
