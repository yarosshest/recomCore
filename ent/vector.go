// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recomCore/ent/product"
	"recomCore/ent/vector"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vector is the model entity for the Vector schema.
type Vector struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Vector holds the value of the "vector" field.
	Vector []byte `json:"vector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VectorQuery when eager-loading is set.
	Edges           VectorEdges `json:"edges"`
	product_vectors *int
	selectValues    sql.SelectValues
}

// VectorEdges holds the relations/edges for other nodes in the graph.
type VectorEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Product `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VectorEdges) OwnerOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vector) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vector.FieldVector:
			values[i] = new([]byte)
		case vector.FieldID:
			values[i] = new(sql.NullInt64)
		case vector.ForeignKeys[0]: // product_vectors
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vector fields.
func (v *Vector) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vector.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vector.FieldVector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vector", values[i])
			} else if value != nil {
				v.Vector = *value
			}
		case vector.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_vectors", value)
			} else if value.Valid {
				v.product_vectors = new(int)
				*v.product_vectors = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vector.
// This includes values selected through modifiers, order, etc.
func (v *Vector) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Vector entity.
func (v *Vector) QueryOwner() *ProductQuery {
	return NewVectorClient(v.config).QueryOwner(v)
}

// Update returns a builder for updating this Vector.
// Note that you need to call Vector.Unwrap() before calling this method if this Vector
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vector) Update() *VectorUpdateOne {
	return NewVectorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vector entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vector) Unwrap() *Vector {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vector is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vector) String() string {
	var builder strings.Builder
	builder.WriteString("Vector(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("vector=")
	builder.WriteString(fmt.Sprintf("%v", v.Vector))
	builder.WriteByte(')')
	return builder.String()
}

// Vectors is a parsable slice of Vector.
type Vectors []*Vector
