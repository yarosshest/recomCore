// Code generated by ent, DO NOT EDIT.

package attribute

import (
	"recomCore/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldName, v))
}

// ValueType applies equality check predicate on the "value_type" field. It's identical to ValueTypeEQ.
func ValueType(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValueType, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValue, v))
}

// ValueDescription applies equality check predicate on the "value_description" field. It's identical to ValueDescriptionEQ.
func ValueDescription(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValueDescription, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldName, v))
}

// ValueTypeEQ applies the EQ predicate on the "value_type" field.
func ValueTypeEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValueType, v))
}

// ValueTypeNEQ applies the NEQ predicate on the "value_type" field.
func ValueTypeNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldValueType, v))
}

// ValueTypeIn applies the In predicate on the "value_type" field.
func ValueTypeIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldValueType, vs...))
}

// ValueTypeNotIn applies the NotIn predicate on the "value_type" field.
func ValueTypeNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldValueType, vs...))
}

// ValueTypeGT applies the GT predicate on the "value_type" field.
func ValueTypeGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldValueType, v))
}

// ValueTypeGTE applies the GTE predicate on the "value_type" field.
func ValueTypeGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldValueType, v))
}

// ValueTypeLT applies the LT predicate on the "value_type" field.
func ValueTypeLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldValueType, v))
}

// ValueTypeLTE applies the LTE predicate on the "value_type" field.
func ValueTypeLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldValueType, v))
}

// ValueTypeContains applies the Contains predicate on the "value_type" field.
func ValueTypeContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldValueType, v))
}

// ValueTypeHasPrefix applies the HasPrefix predicate on the "value_type" field.
func ValueTypeHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldValueType, v))
}

// ValueTypeHasSuffix applies the HasSuffix predicate on the "value_type" field.
func ValueTypeHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldValueType, v))
}

// ValueTypeIsNil applies the IsNil predicate on the "value_type" field.
func ValueTypeIsNil() predicate.Attribute {
	return predicate.Attribute(sql.FieldIsNull(FieldValueType))
}

// ValueTypeNotNil applies the NotNil predicate on the "value_type" field.
func ValueTypeNotNil() predicate.Attribute {
	return predicate.Attribute(sql.FieldNotNull(FieldValueType))
}

// ValueTypeEqualFold applies the EqualFold predicate on the "value_type" field.
func ValueTypeEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldValueType, v))
}

// ValueTypeContainsFold applies the ContainsFold predicate on the "value_type" field.
func ValueTypeContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldValueType, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldValue, v))
}

// ValueDescriptionEQ applies the EQ predicate on the "value_description" field.
func ValueDescriptionEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEQ(FieldValueDescription, v))
}

// ValueDescriptionNEQ applies the NEQ predicate on the "value_description" field.
func ValueDescriptionNEQ(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNEQ(FieldValueDescription, v))
}

// ValueDescriptionIn applies the In predicate on the "value_description" field.
func ValueDescriptionIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldIn(FieldValueDescription, vs...))
}

// ValueDescriptionNotIn applies the NotIn predicate on the "value_description" field.
func ValueDescriptionNotIn(vs ...string) predicate.Attribute {
	return predicate.Attribute(sql.FieldNotIn(FieldValueDescription, vs...))
}

// ValueDescriptionGT applies the GT predicate on the "value_description" field.
func ValueDescriptionGT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGT(FieldValueDescription, v))
}

// ValueDescriptionGTE applies the GTE predicate on the "value_description" field.
func ValueDescriptionGTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldGTE(FieldValueDescription, v))
}

// ValueDescriptionLT applies the LT predicate on the "value_description" field.
func ValueDescriptionLT(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLT(FieldValueDescription, v))
}

// ValueDescriptionLTE applies the LTE predicate on the "value_description" field.
func ValueDescriptionLTE(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldLTE(FieldValueDescription, v))
}

// ValueDescriptionContains applies the Contains predicate on the "value_description" field.
func ValueDescriptionContains(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContains(FieldValueDescription, v))
}

// ValueDescriptionHasPrefix applies the HasPrefix predicate on the "value_description" field.
func ValueDescriptionHasPrefix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasPrefix(FieldValueDescription, v))
}

// ValueDescriptionHasSuffix applies the HasSuffix predicate on the "value_description" field.
func ValueDescriptionHasSuffix(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldHasSuffix(FieldValueDescription, v))
}

// ValueDescriptionIsNil applies the IsNil predicate on the "value_description" field.
func ValueDescriptionIsNil() predicate.Attribute {
	return predicate.Attribute(sql.FieldIsNull(FieldValueDescription))
}

// ValueDescriptionNotNil applies the NotNil predicate on the "value_description" field.
func ValueDescriptionNotNil() predicate.Attribute {
	return predicate.Attribute(sql.FieldNotNull(FieldValueDescription))
}

// ValueDescriptionEqualFold applies the EqualFold predicate on the "value_description" field.
func ValueDescriptionEqualFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldEqualFold(FieldValueDescription, v))
}

// ValueDescriptionContainsFold applies the ContainsFold predicate on the "value_description" field.
func ValueDescriptionContainsFold(v string) predicate.Attribute {
	return predicate.Attribute(sql.FieldContainsFold(FieldValueDescription, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Product) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attribute) predicate.Attribute {
	return predicate.Attribute(func(s *sql.Selector) {
		p(s.Not())
	})
}
