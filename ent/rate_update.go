// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"recomCore/ent/predicate"
	"recomCore/ent/product"
	"recomCore/ent/rate"
	"recomCore/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RateUpdate is the builder for updating Rate entities.
type RateUpdate struct {
	config
	hooks    []Hook
	mutation *RateMutation
}

// Where appends a list predicates to the RateUpdate builder.
func (ru *RateUpdate) Where(ps ...predicate.Rate) *RateUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRate sets the "rate" field.
func (ru *RateUpdate) SetRate(b bool) *RateUpdate {
	ru.mutation.SetRate(b)
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RateUpdate) SetOwnerID(id int) *RateUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ru *RateUpdate) SetNillableOwnerID(id *int) *RateUpdate {
	if id != nil {
		ru = ru.SetOwnerID(*id)
	}
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RateUpdate) SetOwner(u *User) *RateUpdate {
	return ru.SetOwnerID(u.ID)
}

// SetSubjectID sets the "subject" edge to the Product entity by ID.
func (ru *RateUpdate) SetSubjectID(id int) *RateUpdate {
	ru.mutation.SetSubjectID(id)
	return ru
}

// SetNillableSubjectID sets the "subject" edge to the Product entity by ID if the given value is not nil.
func (ru *RateUpdate) SetNillableSubjectID(id *int) *RateUpdate {
	if id != nil {
		ru = ru.SetSubjectID(*id)
	}
	return ru
}

// SetSubject sets the "subject" edge to the Product entity.
func (ru *RateUpdate) SetSubject(p *Product) *RateUpdate {
	return ru.SetSubjectID(p.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ru *RateUpdate) Mutation() *RateMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RateUpdate) ClearOwner() *RateUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// ClearSubject clears the "subject" edge to the Product entity.
func (ru *RateUpdate) ClearSubject() *RateUpdate {
	ru.mutation.ClearSubject()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RateUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RateUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RateUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rate(); ok {
		_spec.SetField(rate.FieldRate, field.TypeBool, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OwnerTable,
			Columns: []string{rate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OwnerTable,
			Columns: []string{rate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.SubjectTable,
			Columns: []string{rate.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.SubjectTable,
			Columns: []string{rate.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RateUpdateOne is the builder for updating a single Rate entity.
type RateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RateMutation
}

// SetRate sets the "rate" field.
func (ruo *RateUpdateOne) SetRate(b bool) *RateUpdateOne {
	ruo.mutation.SetRate(b)
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RateUpdateOne) SetOwnerID(id int) *RateUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableOwnerID(id *int) *RateUpdateOne {
	if id != nil {
		ruo = ruo.SetOwnerID(*id)
	}
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RateUpdateOne) SetOwner(u *User) *RateUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// SetSubjectID sets the "subject" edge to the Product entity by ID.
func (ruo *RateUpdateOne) SetSubjectID(id int) *RateUpdateOne {
	ruo.mutation.SetSubjectID(id)
	return ruo
}

// SetNillableSubjectID sets the "subject" edge to the Product entity by ID if the given value is not nil.
func (ruo *RateUpdateOne) SetNillableSubjectID(id *int) *RateUpdateOne {
	if id != nil {
		ruo = ruo.SetSubjectID(*id)
	}
	return ruo
}

// SetSubject sets the "subject" edge to the Product entity.
func (ruo *RateUpdateOne) SetSubject(p *Product) *RateUpdateOne {
	return ruo.SetSubjectID(p.ID)
}

// Mutation returns the RateMutation object of the builder.
func (ruo *RateUpdateOne) Mutation() *RateMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RateUpdateOne) ClearOwner() *RateUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// ClearSubject clears the "subject" edge to the Product entity.
func (ruo *RateUpdateOne) ClearSubject() *RateUpdateOne {
	ruo.mutation.ClearSubject()
	return ruo
}

// Where appends a list predicates to the RateUpdate builder.
func (ruo *RateUpdateOne) Where(ps ...predicate.Rate) *RateUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RateUpdateOne) Select(field string, fields ...string) *RateUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rate entity.
func (ruo *RateUpdateOne) Save(ctx context.Context) (*Rate, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RateUpdateOne) SaveX(ctx context.Context) *Rate {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RateUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RateUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RateUpdateOne) sqlSave(ctx context.Context) (_node *Rate, err error) {
	_spec := sqlgraph.NewUpdateSpec(rate.Table, rate.Columns, sqlgraph.NewFieldSpec(rate.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rate.FieldID)
		for _, f := range fields {
			if !rate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Rate(); ok {
		_spec.SetField(rate.FieldRate, field.TypeBool, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OwnerTable,
			Columns: []string{rate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.OwnerTable,
			Columns: []string{rate.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.SubjectTable,
			Columns: []string{rate.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rate.SubjectTable,
			Columns: []string{rate.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rate{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
