// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"recomCore/ent/product"
	"recomCore/ent/rate"
	"recomCore/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Rate is the model entity for the Rate schema.
type Rate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate bool `json:"rate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RateQuery when eager-loading is set.
	Edges         RateEdges `json:"edges"`
	product_rates *int
	user_rates    *int
	selectValues  sql.SelectValues
}

// RateEdges holds the relations/edges for other nodes in the graph.
type RateEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Subject holds the value of the subject edge.
	Subject *Product `json:"subject,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RateEdges) SubjectOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Subject == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Subject, nil
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rate.FieldRate:
			values[i] = new(sql.NullBool)
		case rate.FieldID:
			values[i] = new(sql.NullInt64)
		case rate.ForeignKeys[0]: // product_rates
			values[i] = new(sql.NullInt64)
		case rate.ForeignKeys[1]: // user_rates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rate fields.
func (r *Rate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rate.FieldRate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				r.Rate = value.Bool
			}
		case rate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field product_rates", value)
			} else if value.Valid {
				r.product_rates = new(int)
				*r.product_rates = int(value.Int64)
			}
		case rate.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_rates", value)
			} else if value.Valid {
				r.user_rates = new(int)
				*r.user_rates = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rate.
// This includes values selected through modifiers, order, etc.
func (r *Rate) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Rate entity.
func (r *Rate) QueryOwner() *UserQuery {
	return NewRateClient(r.config).QueryOwner(r)
}

// QuerySubject queries the "subject" edge of the Rate entity.
func (r *Rate) QuerySubject() *ProductQuery {
	return NewRateClient(r.config).QuerySubject(r)
}

// Update returns a builder for updating this Rate.
// Note that you need to call Rate.Unwrap() before calling this method if this Rate
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rate) Update() *RateUpdateOne {
	return NewRateClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rate) Unwrap() *Rate {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rate is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rate) String() string {
	var builder strings.Builder
	builder.WriteString("Rate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", r.Rate))
	builder.WriteByte(')')
	return builder.String()
}

// Rates is a parsable slice of Rate.
type Rates []*Rate
